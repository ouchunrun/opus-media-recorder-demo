const privateData=new WeakMap,wrappers=new WeakMap;function pd(e){const t=privateData.get(e);return console.assert(null!=t,"'this' is expected an Event object, but got",e),t}function EventWrapper(e,t){privateData.set(this,{eventTarget:e,event:t,eventPhase:2,currentTarget:e,canceled:!1,stopped:!1,passiveListener:null,timeStamp:t.timeStamp||Date.now()}),Object.defineProperty(this,"isTrusted",{value:!1,enumerable:!0});const r=Object.keys(t);for(let e=0;e<r.length;++e){const t=r[e];t in this||Object.defineProperty(this,t,defineRedirectDescriptor(t))}}function defineRedirectDescriptor(e){return{get(){return pd(this).event[e]},set(t){pd(this).event[e]=t},configurable:!0,enumerable:!0}}function defineCallDescriptor(e){return{value(){const t=pd(this).event;return t[e].apply(t,arguments)},configurable:!0,enumerable:!0}}function defineWrapper(e,t){const r=Object.keys(t);if(0===r.length)return e;function o(t,r){e.call(this,t,r)}o.prototype=Object.create(e.prototype,{constructor:{value:o,configurable:!0,writable:!0}});for(let n=0;n<r.length;++n){const s=r[n];if(!(s in e.prototype)){const e="function"==typeof Object.getOwnPropertyDescriptor(t,s).value;Object.defineProperty(o.prototype,s,e?defineCallDescriptor(s):defineRedirectDescriptor(s))}}return o}function getWrapper(e){if(null==e||e===Object.prototype)return EventWrapper;let t=wrappers.get(e);return null==t&&(t=defineWrapper(getWrapper(Object.getPrototypeOf(e)),e),wrappers.set(e,t)),t}function wrapEvent(e,t){return new(getWrapper(Object.getPrototypeOf(t)))(e,t)}function isStopped(e){return pd(e).stopped}function setEventPhase(e,t){pd(e).eventPhase=t}function setCurrentTarget(e,t){pd(e).currentTarget=t}function setPassiveListener(e,t){pd(e).passiveListener=t}EventWrapper.prototype={get type(){return pd(this).event.type},get target(){return pd(this).eventTarget},get currentTarget(){return pd(this).currentTarget},composedPath(){const e=pd(this).currentTarget;return null==e?[]:[e]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return pd(this).eventPhase},stopPropagation(){const e=pd(this);"function"==typeof e.event.stopPropagation&&e.event.stopPropagation()},stopImmediatePropagation(){const e=pd(this);e.stopped=!0,"function"==typeof e.event.stopImmediatePropagation&&e.event.stopImmediatePropagation()},get bubbles(){return Boolean(pd(this).event.bubbles)},get cancelable(){return Boolean(pd(this).event.cancelable)},preventDefault(){const e=pd(this);null==e.passiveListener?e.event.cancelable&&(e.canceled=!0,"function"==typeof e.event.preventDefault&&e.event.preventDefault()):console.warn("EventWrapper#preventDefault() was called from a passive listener:",e.passiveListener)},get defaultPrevented(){return pd(this).canceled},get composed(){return Boolean(pd(this).event.composed)},get timeStamp(){return pd(this).timeStamp}},Object.defineProperty(EventWrapper.prototype,"constructor",{value:EventWrapper,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.Event&&(Object.setPrototypeOf(EventWrapper.prototype,window.Event.prototype),wrappers.set(window.Event.prototype,EventWrapper));const listenersMap=new WeakMap,CAPTURE=1,BUBBLE=2,ATTRIBUTE=3;function isObject(e){return null!==e&&"object"==typeof e}function getListeners(e){const t=listenersMap.get(e);if(null==t)throw new TypeError("'this' is expected an EventTarget object, but got another value.");return t}function defineEventAttributeDescriptor(e){return{get(){let t=getListeners(this).get(e);for(;null!=t;){if(3===t.listenerType)return t.listener;t=t.next}return null},set(t){"function"==typeof t||isObject(t)||(t=null);const r=getListeners(this);let o=null,n=r.get(e);for(;null!=n;)3===n.listenerType?null!==o?o.next=n.next:null!==n.next?r.set(e,n.next):r.delete(e):o=n,n=n.next;if(null!==t){const n={listener:t,listenerType:3,passive:!1,once:!1,next:null};null===o?r.set(e,n):o.next=n}},configurable:!0,enumerable:!0}}function defineEventAttribute(e,t){Object.defineProperty(e,"on"+t,defineEventAttributeDescriptor(t))}function defineCustomEventTarget(e){function t(){EventTargetWrapper.call(this)}t.prototype=Object.create(EventTargetWrapper.prototype,{constructor:{value:t,configurable:!0,writable:!0}});for(let r=0;r<e.length;++r)defineEventAttribute(t.prototype,e[r]);return t}function EventTargetWrapper(){if(!(this instanceof EventTargetWrapper)){if(1===arguments.length&&Array.isArray(arguments[0]))return defineCustomEventTarget(arguments[0]);if(arguments.length>0){const e=new Array(arguments.length);for(let t=0;t<arguments.length;++t)e[t]=arguments[t];return defineCustomEventTarget(e)}throw new TypeError("Cannot call a class as a function")}listenersMap.set(this,new Map)}EventTargetWrapper.prototype={addEventListener(e,t,r){if(null==t)return!1;if("function"!=typeof t&&!isObject(t))throw new TypeError("'listener' should be a function or an object.");const o=getListeners(this),n=isObject(r),s=(n?Boolean(r.capture):Boolean(r))?1:2,i={listener:t,listenerType:s,passive:n&&Boolean(r.passive),once:n&&Boolean(r.once),next:null};let a=o.get(e);if(void 0===a)return o.set(e,i),!0;let c=null;for(;null!=a;){if(a.listener===t&&a.listenerType===s)return!1;c=a,a=a.next}return c.next=i,!0},removeEventListener(e,t,r){if(null==t)return!1;const o=getListeners(this),n=(isObject(r)?Boolean(r.capture):Boolean(r))?1:2;let s=null,i=o.get(e);for(;null!=i;){if(i.listener===t&&i.listenerType===n)return null!==s?s.next=i.next:null!==i.next?o.set(e,i.next):o.delete(e),!0;s=i,i=i.next}return!1},dispatchEvent(e){if(null==e||"string"!=typeof e.type)throw new TypeError('"event.type" should be a string.');const t=getListeners(this),r=e.type;let o=t.get(r);if(null==o)return!0;const n=wrapEvent(this,e);let s=null;for(;null!=o;){if(o.once?null!==s?s.next=o.next:null!==o.next?t.set(r,o.next):t.delete(r):s=o,setPassiveListener(n,o.passive?o.listener:null),"function"==typeof o.listener)try{o.listener.call(this,n)}catch(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e)}else 3!==o.listenerType&&"function"==typeof o.listener.handleEvent&&o.listener.handleEvent(n);if(isStopped(n))break;o=o.next}return setPassiveListener(n,null),setEventPhase(n,0),setCurrentTarget(n,null),!n.defaultPrevented}},Object.defineProperty(EventTargetWrapper.prototype,"constructor",{value:EventTargetWrapper,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.EventTarget&&Object.setPrototypeOf(EventTargetWrapper.prototype,window.EventTarget.prototype);var __spreadArrays=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var o=Array(e),n=0;for(t=0;t<r;t++)for(var s=arguments[t],i=0,a=s.length;i<a;i++,n++)o[n]=s[i];return o},BrowserInfo=function(e,t,r){this.name=e,this.version=t,this.os=r},NodeInfo=function(e){this.version=e,this.name="node",this.os=process.platform},BotInfo=function(){this.bot=!0,this.name="bot",this.version=null,this.os=null},SEARCHBOX_UA_REGEX=/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/,SEARCHBOT_OS_REGEX=/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/,REQUIRED_VERSION_PARTS=3,userAgentRules=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/Edg\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["searchbot",SEARCHBOX_UA_REGEX]],operatingSystemRules=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",SEARCHBOT_OS_REGEX]];function detect(e){return e?parseUserAgent(e):"undefined"!=typeof navigator?parseUserAgent(navigator.userAgent):getNodeVersion()}function parseUserAgent(e){var t=""!==e&&userAgentRules.reduce((function(t,r){var o=r[0],n=r[1];if(t)return t;var s=n.exec(e);return!!s&&[o,s]}),!1);if(!t)return null;var r=t[0],o=t[1];if("searchbot"===r)return new BotInfo;var n=o[1]&&o[1].split(/[._]/).slice(0,3);return n?n.length<REQUIRED_VERSION_PARTS&&(n=__spreadArrays(n,createVersionParts(REQUIRED_VERSION_PARTS-n.length))):n=[],new BrowserInfo(r,n.join("."),detectOS(e))}function detectOS(e){for(var t=0,r=operatingSystemRules.length;t<r;t++){var o=operatingSystemRules[t],n=o[0];if(o[1].test(e))return n}return null}function getNodeVersion(){return"undefined"!=typeof process&&process.version?new NodeInfo(process.version.slice(1)):null}function createVersionParts(e){for(var t=[],r=0;r<e;r++)t.push("0");return t}const browser=detect(),AudioContext=window.AudioContext||window.webkitAudioContext||!1,BUFFER_SIZE=4096;class OggOpusMediaRecorder extends EventTargetWrapper{constructor(e,t={},r={},o){const{mimeType:n,audioBitsPerSecond:s,videoBitsPerSecond:i,bitsPerSecond:a}=t,{encoderWorkerFactory:c,OggOpusEncoderWasmPath:d,WebMOpusEncoderWasmPath:u}=r;if(super(),this._stream=e,this._state="inactive",this._mimeType=n||"audio/ogg",this._audioBitsPerSecond=s||a,this.workerState="inactive",this.recordingDuration=o||3e4,!OggOpusMediaRecorder.isTypeSupported(this._mimeType))throw new TypeError("invalid arguments, a MIME Type is not supported");switch(OggOpusMediaRecorder._parseType(this._mimeType).subtype){case"wave":case"wav":this._mimeType="audio/wave";break;case"webm":this._mimeType="audio/webm";break;case"ogg":this._mimeType="audio/ogg";break;default:switch(browser&&browser.name){case"chrome":this._mimeType="audio/webm";break;case"firefox":this._mimeType="audio/ogg";break;case"edge":this._mimeType="audio/webm";break;case"ios":case"safari":this._mimeType="audio/wave";break;default:this._mimeType="audio/webm"}}switch(this._mimeType){case"audio/wave":this._wasmPath="";break;case"audio/webm":this._wasmPath=u||"";break;case"audio/ogg":this._wasmPath=d||"";break;default:throw new Error("Internal Error: Unexpected MIME Type: "+this._mimeType)}let l="";document.currentScript?l=document.currentScript.src:self.location&&(l=self.location.href),l=l.substr(0,l.lastIndexOf("/"))+"/dist/encoderWorker.js","function"==typeof OggOpusMediaRecorder.encoderWorker&&(l=URL.createObjectURL(new Blob([`(${OggOpusMediaRecorder.encoderWorker})()`]))),this._workerFactory="function"==typeof c?c:e=>new Worker(l),this._spawnWorker()}get stream(){return this._stream}get mimeType(){return this._mimeType}get state(){return this._state}get videoBitsPerSecond(){}get audioBitsPerSecond(){return this._audioBitsPerSecond}_spawnWorker(){this.worker=this._workerFactory(),this.worker.onmessage=e=>this._onmessageFromWorker(e),this.worker.onerror=e=>this._onerrorFromWorker(e),this._postMessageToWorker("loadEncoder",{mimeType:this._mimeType,wasmPath:this._wasmPath})}_postMessageToWorker(e,t={}){switch(e){case"loadEncoder":let{mimeType:r,wasmPath:o}=t;this.worker.postMessage({command:e,mimeType:r,wasmPath:o});break;case"init":let{sampleRate:n,channelCount:s,bitsPerSecond:i}=t;this.worker.postMessage({command:e,sampleRate:n,channelCount:s,bitsPerSecond:i}),this.workerState="encoding",this.source.connect(this.processor),this.processor.connect(this.context.destination);let a=new window.Event("start");this.dispatchEvent(a);break;case"pushInputData":let{channelBuffers:c,length:d,duration:u}=t;this.worker.postMessage({command:e,channelBuffers:c,length:d,duration:u},c.map(e=>e.buffer));break;case"getEncodedData":case"done":this.worker.postMessage({command:e});break;default:throw new Error("Internal Error: Incorrect postMessage requested.")}}_onmessageFromWorker(e){const{command:t,buffers:r}=e.data;let o;switch(t){case"readyToInit":const{sampleRate:e,channelCount:n}=this;this.workerState="readyToInit","recording"===this.state&&this._postMessageToWorker("init",{sampleRate:e,channelCount:n,bitsPerSecond:this.audioBitsPerSecond});break;case"encodedData":case"lastEncodedData":let s=new Blob(r,{type:this._mimeType});o=new window.Event("dataavailable"),o.data=s,this.dispatchEvent(o),"lastEncodedData"===t&&(o=new window.Event("stop"),this.dispatchEvent(o),this.workerState="closed")}}_onerrorFromWorker(e){this.source.disconnect(),this.processor.disconnect(),this.worker.terminate(),this.workerState="closed";let t=["FileName: "+e.filename,"LineNumber: "+e.lineno,"Message: "+e.message].join(" - "),r=new window.Event("error");r.name="UnknownError",r.message=t,this.dispatchEvent(r)}_enableAudioProcessCallback(e){let t=0;this.processor.onaudioprocess=r=>{const{inputBuffer:o,playbackTime:n}=r,{sampleRate:s,length:i,duration:a,numberOfChannels:c}=o,d=new Array(c);for(let e=0;e<c;e++)d[e]=o.getChannelData(e);const u={channelBuffers:d,length:i,duration:a};this._postMessageToWorker("pushInputData",u),t+=a,t>=e&&(this._postMessageToWorker("getEncodedData"),t=0)}}handleRecordingDuration(e){e=e||0;let t=this;"paused"!==t._state?"stopped"!==t._state&&(e>=t.recordingDuration?t.stopRecording():(e+=1e3,setTimeout((function(){t.handleRecordingDuration(e)}),1e3))):setTimeout((function(){t.handleRecordingDuration(e)}),1e3)}startRecording(e=Number.MAX_SAFE_INTEGER){if("inactive"!==this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must be inactive.");if(e<0)throw new TypeError("invalid arguments, timeslice should be 0 or higher.");if(e/=1e3,"closed"===this.workerState&&this._spawnWorker(),this.context=new AudioContext,!this.stream.getAudioTracks()[0])throw new Error("DOMException: UnkownError, media track not found.");if(this.channelCount=2,this.sampleRate=this.context.sampleRate,this.source=this.context.createMediaStreamSource(this.stream),this.processor=this.context.createScriptProcessor(4096,this.channelCount,this.channelCount),this._state="recording",this._enableAudioProcessCallback(e),"readyToInit"===this.workerState){const{sampleRate:e,channelCount:t}=this;this._postMessageToWorker("init",{sampleRate:e,channelCount:t,bitsPerSecond:this.audioBitsPerSecond})}this.recordingDuration&&this.handleRecordingDuration()}stopRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.disconnect(),this.processor.disconnect(),this.context.close(),this._postMessageToWorker("done"),this._state="inactive"}pauseRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.disconnect(),this.processor.disconnect();let e=new window.Event("pause");this.dispatchEvent(e),this._state="paused"}resumeRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.connect(this.processor),this.processor.connect(this.context.destination);let e=new window.Event("resume");this.dispatchEvent(e),this._state="recording"}requestData(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this._postMessageToWorker("getEncodedData")}static isTypeSupported(e){if("string"==typeof e&&!e)return!0;try{var{type:t,subtype:r,codec:o}=OggOpusMediaRecorder._parseType(e)}catch(e){return!1}if("audio"!==t||"ogg"!==r&&"webm"!==r&&"wave"!==r&&"wav"!==r)return!1;switch(r){case"ogg":case"webm":if("opus"!==o&&o)return!1;break;case"wave":case"wav":if(o)return!1}return!0}static _parseType(e){try{const n=/^(\w+)\/(\w+)(;\s*codecs=(\w+))?$/;var[,t,r,,o]=e.match(n)}catch(t){return"string"!=typeof e||e?null:{type:"",subtype:"",codec:""}}return{type:t,subtype:r,codec:o}}}["start","stop","dataavailable","pause","resume","error"].forEach(e=>defineEventAttribute(OggOpusMediaRecorder.prototype,e)),browser&&"edge"===browser.name&&function(){var e=Worker.prototype.postMessage;Worker.prototype.postMessage=function(t,r=null){e.apply(this,[t])}}();let localAudio=document.createElement("audio");localAudio.muted=!0,localAudio.hidden=!0,localAudio.autoplay=!0,document.body.appendChild(localAudio);let stream=null,fileName=null,audioCtx=null,audioRecorder={},recordingDuration=3e4,recorderCallback=null;const workerOptions={OggOpusEncoderWasmPath:"https://cdn.jsdelivr.net/npm/opus-media-recorder@0.7.19/OggOpusEncoder.wasm"};function OggOpusRecorder(e,t){console.log("Recorder audio file to ogg"),fileName=e.name.replace(/\.[^\.]+$/,""),recorderCallback=t,audioCtx=new AudioContext;let r=new FileReader;r.file=e,r.onload=function(e){console.log("file reade onload...");let t=e.target.result;audioCtx.decodeAudioData(t).then(createSoundSource).catch((function(e){console.error(e.toString())}))},r.readAsArrayBuffer(r.file)}function createSoundSource(e){let t=audioCtx.createBufferSource();t.buffer=e;let r=audioCtx.createMediaStreamDestination();t.connect(r),t.start(),localAudio.srcObject=r.stream,stream=r.stream}function createMediaRecorder(e,t){let r={mimeType:"audio/ogg"},o=new MediaRecorder(e,r,workerOptions,t),n=[];return o.onstart=function(){n=[],console.log("Recorder started")},o.ondataavailable=function(e){n.push(e.data),console.log("Recorder data available ")},o.onstop=function(){console.log("recorder complete!");let t=n[0];if(n=[],!t.size)throw new Error("Exception: Blob is empty");recorderCallback?(recorderCallback(t),audioRecorder=null,audioCtx=null,e=null,recorderCallback=null):console.warn("recorderCallback is not found.")},o.onpause=function(){console.log("Recorder paused")},o.onresume=function(){console.log("Recorder resumed")},o.onerror=function(e){e&&(e.name||(e.name="UnknownError"),-1!==e.name.toString().toLowerCase().indexOf("invalidstate")?console.error("The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.",e):-1!==e.name.toString().toLowerCase().indexOf("notsupported")?console.error("MIME type (",r.mimeType,") is not supported.",e):-1!==e.name.toString().toLowerCase().indexOf("security")?console.error("MediaRecorder security error",e):"OutOfMemory"===e.name?console.error("The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"IllegalStreamModification"===e.name?console.error("A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"OtherRecordingError"===e.name?console.error("Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"GenericError"===e.name?console.error("The UA cannot provide the codec or recording option that has been requested.",e):console.error("MediaRecorder Error",e),console.error("Recorder encounters error:"+e.message),"inactive"!==o._state&&"stopped"!==o._state&&o.stop())},o}window.MediaRecorder=OggOpusMediaRecorder,localAudio.addEventListener("canplay",(function(){try{localAudio.play(),audioRecorder=createMediaRecorder(stream,recordingDuration),console.log("Creating MediaRecorder success"),audioRecorder.startRecording()}catch(e){console.log("MediaRecorder is failed: "+e.message),Promise.reject(new Error)}})),localAudio.addEventListener("ended",(function(){"inactive"!==audioRecorder._state&&"stopped"!==audioRecorder._state&&audioRecorder.stopRecording()})),window.addEventListener("load",(function(){if(void 0===OggOpusMediaRecorder)console.error("No OpusMediaRecorder found");else{["audio/wave","audio/wav","audio/ogg","audio/ogg;codecs=opus","audio/webm","audio/webm;codecs=opus"].forEach((function(e){console.log(e+" is "+(MediaRecorder.isTypeSupported(e)?"supported":"NOT supported"))}))}}),!1);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
