const privateData=new WeakMap,wrappers=new WeakMap;function pd(e){const t=privateData.get(e);return console.assert(null!=t,"'this' is expected an Event object, but got",e),t}function EventWrapper(e,t){privateData.set(this,{eventTarget:e,event:t,eventPhase:2,currentTarget:e,canceled:!1,stopped:!1,passiveListener:null,timeStamp:t.timeStamp||Date.now()}),Object.defineProperty(this,"isTrusted",{value:!1,enumerable:!0});const r=Object.keys(t);for(let e=0;e<r.length;++e){const t=r[e];t in this||Object.defineProperty(this,t,defineRedirectDescriptor(t))}}function defineRedirectDescriptor(e){return{get(){return pd(this).event[e]},set(t){pd(this).event[e]=t},configurable:!0,enumerable:!0}}function defineCallDescriptor(e){return{value(){const t=pd(this).event;return t[e].apply(t,arguments)},configurable:!0,enumerable:!0}}function defineWrapper(e,t){const r=Object.keys(t);if(0===r.length)return e;function n(t,r){e.call(this,t,r)}n.prototype=Object.create(e.prototype,{constructor:{value:n,configurable:!0,writable:!0}});for(let o=0;o<r.length;++o){const i=r[o];if(!(i in e.prototype)){const e="function"==typeof Object.getOwnPropertyDescriptor(t,i).value;Object.defineProperty(n.prototype,i,e?defineCallDescriptor(i):defineRedirectDescriptor(i))}}return n}function getWrapper(e){if(null==e||e===Object.prototype)return EventWrapper;let t=wrappers.get(e);return null==t&&(t=defineWrapper(getWrapper(Object.getPrototypeOf(e)),e),wrappers.set(e,t)),t}function wrapEvent(e,t){return new(getWrapper(Object.getPrototypeOf(t)))(e,t)}function isStopped(e){return pd(e).stopped}function setEventPhase(e,t){pd(e).eventPhase=t}function setCurrentTarget(e,t){pd(e).currentTarget=t}function setPassiveListener(e,t){pd(e).passiveListener=t}EventWrapper.prototype={get type(){return pd(this).event.type},get target(){return pd(this).eventTarget},get currentTarget(){return pd(this).currentTarget},composedPath(){const e=pd(this).currentTarget;return null==e?[]:[e]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return pd(this).eventPhase},stopPropagation(){const e=pd(this);"function"==typeof e.event.stopPropagation&&e.event.stopPropagation()},stopImmediatePropagation(){const e=pd(this);e.stopped=!0,"function"==typeof e.event.stopImmediatePropagation&&e.event.stopImmediatePropagation()},get bubbles(){return Boolean(pd(this).event.bubbles)},get cancelable(){return Boolean(pd(this).event.cancelable)},preventDefault(){const e=pd(this);null==e.passiveListener?e.event.cancelable&&(e.canceled=!0,"function"==typeof e.event.preventDefault&&e.event.preventDefault()):console.warn("EventWrapper#preventDefault() was called from a passive listener:",e.passiveListener)},get defaultPrevented(){return pd(this).canceled},get composed(){return Boolean(pd(this).event.composed)},get timeStamp(){return pd(this).timeStamp}},Object.defineProperty(EventWrapper.prototype,"constructor",{value:EventWrapper,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.Event&&(Object.setPrototypeOf(EventWrapper.prototype,window.Event.prototype),wrappers.set(window.Event.prototype,EventWrapper));const listenersMap=new WeakMap,CAPTURE=1,BUBBLE=2,ATTRIBUTE=3;function isObject(e){return null!==e&&"object"==typeof e}function getListeners(e){const t=listenersMap.get(e);if(null==t)throw new TypeError("'this' is expected an EventTarget object, but got another value.");return t}function defineEventAttributeDescriptor(e){return{get(){let t=getListeners(this).get(e);for(;null!=t;){if(3===t.listenerType)return t.listener;t=t.next}return null},set(t){"function"==typeof t||isObject(t)||(t=null);const r=getListeners(this);let n=null,o=r.get(e);for(;null!=o;)3===o.listenerType?null!==n?n.next=o.next:null!==o.next?r.set(e,o.next):r.delete(e):n=o,o=o.next;if(null!==t){const o={listener:t,listenerType:3,passive:!1,once:!1,next:null};null===n?r.set(e,o):n.next=o}},configurable:!0,enumerable:!0}}function defineEventAttribute(e,t){Object.defineProperty(e,"on"+t,defineEventAttributeDescriptor(t))}function defineCustomEventTarget(e){function t(){EventTargetWrapper.call(this)}t.prototype=Object.create(EventTargetWrapper.prototype,{constructor:{value:t,configurable:!0,writable:!0}});for(let r=0;r<e.length;++r)defineEventAttribute(t.prototype,e[r]);return t}function EventTargetWrapper(){if(!(this instanceof EventTargetWrapper)){if(1===arguments.length&&Array.isArray(arguments[0]))return defineCustomEventTarget(arguments[0]);if(arguments.length>0){const e=new Array(arguments.length);for(let t=0;t<arguments.length;++t)e[t]=arguments[t];return defineCustomEventTarget(e)}throw new TypeError("Cannot call a class as a function")}listenersMap.set(this,new Map)}EventTargetWrapper.prototype={addEventListener(e,t,r){if(null==t)return!1;if("function"!=typeof t&&!isObject(t))throw new TypeError("'listener' should be a function or an object.");const n=getListeners(this),o=isObject(r),i=(o?Boolean(r.capture):Boolean(r))?1:2,s={listener:t,listenerType:i,passive:o&&Boolean(r.passive),once:o&&Boolean(r.once),next:null};let a=n.get(e);if(void 0===a)return n.set(e,s),!0;let c=null;for(;null!=a;){if(a.listener===t&&a.listenerType===i)return!1;c=a,a=a.next}return c.next=s,!0},removeEventListener(e,t,r){if(null==t)return!1;const n=getListeners(this),o=(isObject(r)?Boolean(r.capture):Boolean(r))?1:2;let i=null,s=n.get(e);for(;null!=s;){if(s.listener===t&&s.listenerType===o)return null!==i?i.next=s.next:null!==s.next?n.set(e,s.next):n.delete(e),!0;i=s,s=s.next}return!1},dispatchEvent(e){if(null==e||"string"!=typeof e.type)throw new TypeError('"event.type" should be a string.');const t=getListeners(this),r=e.type;let n=t.get(r);if(null==n)return!0;const o=wrapEvent(this,e);let i=null;for(;null!=n;){if(n.once?null!==i?i.next=n.next:null!==n.next?t.set(r,n.next):t.delete(r):i=n,setPassiveListener(o,n.passive?n.listener:null),"function"==typeof n.listener)try{n.listener.call(this,o)}catch(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e)}else 3!==n.listenerType&&"function"==typeof n.listener.handleEvent&&n.listener.handleEvent(o);if(isStopped(o))break;n=n.next}return setPassiveListener(o,null),setEventPhase(o,0),setCurrentTarget(o,null),!o.defaultPrevented}},Object.defineProperty(EventTargetWrapper.prototype,"constructor",{value:EventTargetWrapper,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.EventTarget&&Object.setPrototypeOf(EventTargetWrapper.prototype,window.EventTarget.prototype);var __spreadArrays=this&&this.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),o=0;for(t=0;t<r;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)n[o]=i[s];return n},BrowserInfo=function(e,t,r){this.name=e,this.version=t,this.os=r},NodeInfo=function(e){this.version=e,this.name="node",this.os=process.platform},BotInfo=function(){this.bot=!0,this.name="bot",this.version=null,this.os=null},SEARCHBOX_UA_REGEX=/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/,SEARCHBOT_OS_REGEX=/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/,REQUIRED_VERSION_PARTS=3,userAgentRules=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/Edg\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["searchbot",SEARCHBOX_UA_REGEX]],operatingSystemRules=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",SEARCHBOT_OS_REGEX]];function detect(e){return e?parseUserAgent(e):"undefined"!=typeof navigator?parseUserAgent(navigator.userAgent):getNodeVersion()}function parseUserAgent(e){var t=""!==e&&userAgentRules.reduce((function(t,r){var n=r[0],o=r[1];if(t)return t;var i=o.exec(e);return!!i&&[n,i]}),!1);if(!t)return null;var r=t[0],n=t[1];if("searchbot"===r)return new BotInfo;var o=n[1]&&n[1].split(/[._]/).slice(0,3);return o?o.length<REQUIRED_VERSION_PARTS&&(o=__spreadArrays(o,createVersionParts(REQUIRED_VERSION_PARTS-o.length))):o=[],new BrowserInfo(r,o.join("."),detectOS(e))}function detectOS(e){for(var t=0,r=operatingSystemRules.length;t<r;t++){var n=operatingSystemRules[t],o=n[0];if(n[1].test(e))return o}return null}function getNodeVersion(){return"undefined"!=typeof process&&process.version?new NodeInfo(process.version.slice(1)):null}function createVersionParts(e){for(var t=[],r=0;r<e;r++)t.push("0");return t}const browser=detect(),AudioContext=window.AudioContext||window.webkitAudioContext||!1,BUFFER_SIZE=4096;class OggOpusMediaRecorder extends EventTargetWrapper{constructor(e,t={},r={},n){const{mimeType:o,audioBitsPerSecond:i,videoBitsPerSecond:s,bitsPerSecond:a}=t,{encoderWorkerFactory:c,OggOpusEncoderWasmPath:u,WebMOpusEncoderWasmPath:l}=r;if(super(),this._stream=e,this._state="inactive",this._mimeType=o||"audio/ogg",this._audioBitsPerSecond=i||a,this.workerState="inactive",this.recordingDuration=n||3e4,!OggOpusMediaRecorder.isTypeSupported(this._mimeType))throw new TypeError("invalid arguments, a MIME Type is not supported");switch(OggOpusMediaRecorder._parseType(this._mimeType).subtype){case"wave":case"wav":this._mimeType="audio/wave";break;case"webm":this._mimeType="audio/webm";break;case"ogg":this._mimeType="audio/ogg";break;default:switch(browser&&browser.name){case"chrome":this._mimeType="audio/webm";break;case"firefox":this._mimeType="audio/ogg";break;case"edge":this._mimeType="audio/webm";break;case"ios":case"safari":this._mimeType="audio/wave";break;default:this._mimeType="audio/webm"}}switch(this._mimeType){case"audio/wave":this._wasmPath="";break;case"audio/webm":this._wasmPath=l||"";break;case"audio/ogg":this._wasmPath=u||"";break;default:throw new Error("Internal Error: Unexpected MIME Type: "+this._mimeType)}let p="";document.currentScript?p=document.currentScript.src:self.location&&(p=self.location.href),p=p.substr(0,p.lastIndexOf("/"))+"/src/encoderWorker.js","function"==typeof OggOpusMediaRecorder.encoderWorker&&(p=URL.createObjectURL(new Blob([`(${OggOpusMediaRecorder.encoderWorker})()`]))),this._workerFactory="function"==typeof c?c:e=>new Worker(p),this._spawnWorker()}get stream(){return this._stream}get mimeType(){return this._mimeType}get state(){return this._state}get videoBitsPerSecond(){}get audioBitsPerSecond(){return this._audioBitsPerSecond}_spawnWorker(){this.worker=this._workerFactory(),this.worker.onmessage=e=>this._onmessageFromWorker(e),this.worker.onerror=e=>this._onerrorFromWorker(e),this._postMessageToWorker("loadEncoder",{mimeType:this._mimeType,wasmPath:this._wasmPath})}_postMessageToWorker(e,t={}){switch(e){case"loadEncoder":let{mimeType:r,wasmPath:n}=t;this.worker.postMessage({command:e,mimeType:r,wasmPath:n});break;case"init":let{sampleRate:o,channelCount:i,bitsPerSecond:s}=t;this.worker.postMessage({command:e,sampleRate:o,channelCount:i,bitsPerSecond:s}),this.workerState="encoding",this.source.connect(this.processor),this.processor.connect(this.context.destination);let a=new window.Event("start");this.dispatchEvent(a);break;case"pushInputData":let{channelBuffers:c,length:u,duration:l}=t;this.worker.postMessage({command:e,channelBuffers:c,length:u,duration:l},c.map(e=>e.buffer));break;case"getEncodedData":case"done":this.worker.postMessage({command:e});break;default:throw new Error("Internal Error: Incorrect postMessage requested.")}}_onmessageFromWorker(e){const{command:t,buffers:r}=e.data;let n;switch(t){case"readyToInit":const{sampleRate:e,channelCount:o}=this;this.workerState="readyToInit","recording"===this.state&&this._postMessageToWorker("init",{sampleRate:e,channelCount:o,bitsPerSecond:this.audioBitsPerSecond});break;case"encodedData":case"lastEncodedData":let i=new Blob(r,{type:this._mimeType});n=new window.Event("dataavailable"),n.data=i,this.dispatchEvent(n),"lastEncodedData"===t&&(n=new window.Event("stop"),this.dispatchEvent(n),this.workerState="closed")}}_onerrorFromWorker(e){this.source.disconnect(),this.processor.disconnect(),this.worker.terminate(),this.workerState="closed";let t=["FileName: "+e.filename,"LineNumber: "+e.lineno,"Message: "+e.message].join(" - "),r=new window.Event("error");r.name="UnknownError",r.message=t,this.dispatchEvent(r)}_enableAudioProcessCallback(e){let t=0;this.processor.onaudioprocess=r=>{const{inputBuffer:n,playbackTime:o}=r,{sampleRate:i,length:s,duration:a,numberOfChannels:c}=n,u=new Array(c);for(let e=0;e<c;e++)u[e]=n.getChannelData(e);const l={channelBuffers:u,length:s,duration:a};this._postMessageToWorker("pushInputData",l),t+=a,t>=e&&(this._postMessageToWorker("getEncodedData"),t=0)}}handleRecordingDuration(e){e=e||0;let t=this;"paused"!==t._state?"stopped"!==t._state&&(e>=t.recordingDuration?t.stopRecording():(e+=1e3,setTimeout((function(){t.handleRecordingDuration(e)}),1e3))):setTimeout((function(){t.handleRecordingDuration(e)}),1e3)}startRecording(e=Number.MAX_SAFE_INTEGER){if("inactive"!==this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must be inactive.");if(e<0)throw new TypeError("invalid arguments, timeslice should be 0 or higher.");if(e/=1e3,"closed"===this.workerState&&this._spawnWorker(),this.context=new AudioContext,!this.stream.getAudioTracks()[0])throw new Error("DOMException: UnkownError, media track not found.");if(this.channelCount=2,this.sampleRate=this.context.sampleRate,this.source=this.context.createMediaStreamSource(this.stream),this.processor=this.context.createScriptProcessor(4096,this.channelCount,this.channelCount),this._state="recording",this._enableAudioProcessCallback(e),"readyToInit"===this.workerState){const{sampleRate:e,channelCount:t}=this;this._postMessageToWorker("init",{sampleRate:e,channelCount:t,bitsPerSecond:this.audioBitsPerSecond})}this.recordingDuration&&this.handleRecordingDuration()}stopRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.disconnect(),this.processor.disconnect(),this.context.close(),this._postMessageToWorker("done"),this._state="inactive"}pauseRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.disconnect(),this.processor.disconnect();let e=new window.Event("pause");this.dispatchEvent(e),this._state="paused"}resumeRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.connect(this.processor),this.processor.connect(this.context.destination);let e=new window.Event("resume");this.dispatchEvent(e),this._state="recording"}requestData(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this._postMessageToWorker("getEncodedData")}static isTypeSupported(e){if("string"==typeof e&&!e)return!0;try{var{type:t,subtype:r,codec:n}=OggOpusMediaRecorder._parseType(e)}catch(e){return!1}if("audio"!==t||"ogg"!==r&&"webm"!==r&&"wave"!==r&&"wav"!==r)return!1;switch(r){case"ogg":case"webm":if("opus"!==n&&n)return!1;break;case"wave":case"wav":if(n)return!1}return!0}static _parseType(e){try{const o=/^(\w+)\/(\w+)(;\s*codecs=(\w+))?$/;var[,t,r,,n]=e.match(o)}catch(t){return"string"!=typeof e||e?null:{type:"",subtype:"",codec:""}}return{type:t,subtype:r,codec:n}}}function writeString(e,t,r){for(let n=0;n<r.length;n++)e.setUint8(t+n,r.charCodeAt(n))}["start","stop","dataavailable","pause","resume","error"].forEach(e=>defineEventAttribute(OggOpusMediaRecorder.prototype,e)),browser&&"edge"===browser.name&&function(){var e=Worker.prototype.postMessage;Worker.prototype.postMessage=function(t,r=null){e.apply(this,[t])}}();class _AllocatedPointer{constructor(e,t,r,n){switch(this._size=t,this._module=e,this._size){case 1:this._heapArray=r?this._module.HEAP8:this._module.HEAPU8;break;case 2:this._heapArray=r?this._module.HEAP16:this._module.HEAPU16;break;case 4:this._heapArray=r?this._module.HEAP32:this._module.HEAPU32;break;default:this._heapArray=this._module.HEAPU8}n&&(this._size=4,this._heapArray=this._module.HEAPF32),this._pointer=this._module._malloc(t)}free(){this._module._free(this.pointer)}get pointer(){return this._pointer}get value(){let e=0;switch(this._size){case 2:e=1;break;case 4:e=2;break;default:throw new Error("Pointer can be only deferenced as integer-sized")}return this._heapArray[this.pointer>>e]}set value(e){let t=0;switch(this._size){case 2:t=1;break;case 4:t=2;break;default:throw new Error("Pointer can be only deferenced as integer-sized")}this._heapArray[this.pointer>>t]=e}}class _Int32Pointer extends _AllocatedPointer{constructor(e,t){super(e,4,!0,!1),void 0!==t&&(this.value=t)}}class _Uint32Pointer extends _AllocatedPointer{constructor(e,t){super(e,4,!1,!1),void 0!==t&&(this.value=t)}}class _AllocatedBuffer extends _AllocatedPointer{constructor(e,t,r,n,o){super(e,t*r,n,o);let i=0;switch(r){case 1:this._heapArray=n?this._module.HEAP8:this._module.HEAPU8,i=0;break;case 2:this._heapArray=n?this._module.HEAP16:this._module.HEAPU16,i=1;break;case 4:this._heapArray=n?this._module.HEAP32:this._module.HEAPU32,i=2;break;default:throw new Error("Unit size must be an integer-size")}o&&(this._heapArray=this._module.HEAPF32,i=2);let s=this._pointer>>i;this._buffer=this._heapArray.subarray(s,s+t),this._length=t}set(e,t){this._buffer.set(e,t)}subarray(e,t){return this._buffer.subarray(e,t)}get length(){return this._length}}class _Float32Buffer extends _AllocatedBuffer{constructor(e,t){super(e,t,4,!0,!0)}}class _Uint8Buffer extends _AllocatedBuffer{constructor(e,t){super(e,t,1,!1,!1)}}class EmscriptenMemoryAllocator{constructor(e){this._module=e}mallocInt32(e){return new _Int32Pointer(this._module,e)}mallocUint32(e){return new _Uint32Pointer(this._module,e)}mallocUint8Buffer(e){return new _Uint8Buffer(this._module,e)}mallocFloat32Buffer(e){return new _Float32Buffer(this._module,e)}}var Module=function(){var e="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0;return function(t){t=void 0!==(t=t||{})?t:{};class r{constructor(e,r,n){this.config={inputSampleRate:e,channelCount:r},this.memory=new EmscriptenMemoryAllocator(t),this._opus_encoder_create=t._opus_encoder_create,this._opus_encoder_ctl=t._opus_encoder_ctl,this._opus_encode_float=t._opus_encode_float,this._opus_encoder_destroy=t._opus_encoder_destroy,this._speex_resampler_init=t._speex_resampler_init,this._speex_resampler_process_interleaved_float=t._speex_resampler_process_interleaved_float,this._speex_resampler_destroy=t._speex_resampler_destroy,this._container=new t.Container,this._container.init(48e3,r,Math.floor(4294967295*Math.random())),this.OpusInitCodec(48e3,r,n),this.SpeexInitResampler(e,48e3,r),this.inputSamplesPerChannel=20*e/1e3,this.outputSamplePerChannel=960,this.inputBufferIndex=0,this.mInputBuffer=this.memory.mallocFloat32Buffer(this.inputSamplesPerChannel*r),this.mResampledBuffer=this.memory.mallocFloat32Buffer(this.outputSamplePerChannel*r),this.mOutputBuffer=this.memory.mallocUint8Buffer(4e3),this.interleavedBuffers=1!==r?new Float32Array(4096*r):void 0}encode(e){let t=this.interleave(e),r=0;for(;r<t.length;){let e=Math.min(this.mInputBuffer.length-this.inputBufferIndex,t.length-r);if(this.mInputBuffer.set(t.subarray(r,r+e),this.inputBufferIndex),this.inputBufferIndex+=e,this.inputBufferIndex>=this.mInputBuffer.length){let e=this.memory.mallocUint32(this.inputSamplesPerChannel),t=this.memory.mallocUint32(this.outputSamplePerChannel),r=this._speex_resampler_process_interleaved_float(this.resampler,this.mInputBuffer.pointer,e.pointer,this.mResampledBuffer.pointer,t.pointer);if(e.free(),t.free(),0!==r)throw new Error("Resampling error.");let n=this._opus_encode_float(this.encoder,this.mResampledBuffer.pointer,this.outputSamplePerChannel,this.mOutputBuffer.pointer,this.mOutputBuffer.length);if(n<0)throw new Error("Opus encoding error.");this._container.writeFrame(this.mOutputBuffer.pointer,n,this.outputSamplePerChannel),this.inputBufferIndex=0}r+=e}}close(){const{channelCount:e}=this.config;let r=[];for(let t=0;t<e;++t)r.push(new Float32Array(4096-this.inputBufferIndex/e));this.encode(r),t.destroy(this._container),this.mInputBuffer.free(),this.mResampledBuffer.free(),this.mOutputBuffer.free(),this._opus_encoder_destroy(this.encoder),this._speex_resampler_destroy(this.resampler)}interleave(e){const t=e.length;if(1===t)return e[0];for(let r=0;r<t;r++){let n=e[r];for(let e=0;e<n.length;e++)this.interleavedBuffers[e*t+r]=n[e]}return this.interleavedBuffers}OpusInitCodec(e,t,r){let n=this.memory.mallocUint32(void 0);this.encoder=this._opus_encoder_create(e,t,2049,n.pointer);let o=n.value;if(n.free(),0!==o)throw new Error("Opus encodor initialization failed.");r&&this.OpusSetOpusControl(4002,r)}OpusSetOpusControl(e,t){let r=this.memory.mallocInt32(t);this._opus_encoder_ctl(this.encoder,e,r.pointer),r.free()}SpeexInitResampler(e,t,r){let n=this.memory.mallocUint32(void 0);this.resampler=this._speex_resampler_init(r,e,t,6,n.pointer);let o=n.value;if(n.free(),0!==o)throw new Error("Initializing resampler failed.")}}t.init=function(e,n,o){t.encodedBuffers=[],t.encoder=new r(e,n,o)},t.encode=function(e){t.encoder.encode(e)},t.flush=function(){return t.encodedBuffers.splice(0,t.encodedBuffers.length)},t.close=function(){t.encoder.close()};var n,o={};for(n in t)t.hasOwnProperty(n)&&(o[n]=t[n]);t.arguments=[],t.thisProgram="./this.program",t.quit=function(e,t){throw t},t.preRun=[],t.postRun=[];var i,s;i="object"==typeof window,s="function"==typeof importScripts;var a="";(i||s)&&(s?a=self.location.href:document.currentScript&&(a=document.currentScript.src),e&&(a=e),a=0!==a.indexOf("blob:")?a.substr(0,a.lastIndexOf("/")+1):"",t.read=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},s&&(t.readBinary=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),t.readAsync=function(e,t,r){var n=new XMLHttpRequest;n.open("GET",e,!0),n.responseType="arraybuffer",n.onload=function(){200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)},t.setWindowTitle=function(e){document.title=e});var c,u=t.print||("undefined"!=typeof console?console.log.bind(console):"undefined"!=typeof print?print:null),l=t.printErr||("undefined"!=typeof printErr?printErr:"undefined"!=typeof console&&console.warn.bind(console)||u);for(n in o)o.hasOwnProperty(n)&&(t[n]=o[n]);o=void 0,"object"!=typeof WebAssembly&&l("no native wasm support detected");var p=!1;var d="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function f(e,t){return e?function(e,t,r){for(var n=t+r,o=t;e[o]&&!(o>=n);)++o;if(o-t>16&&e.subarray&&d)return d.decode(e.subarray(t,o));for(var i="";t<o;){var s=e[t++];if(128&s){var a=63&e[t++];if(192!=(224&s)){var c=63&e[t++];if((s=224==(240&s)?(15&s)<<12|a<<6|c:(7&s)<<18|a<<12|c<<6|63&e[t++])<65536)i+=String.fromCharCode(s);else{var u=s-65536;i+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else i+=String.fromCharCode((31&s)<<6|a)}else i+=String.fromCharCode(s)}return i}(_,e,t):""}var h,m,_,y;"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");var g=t.TOTAL_MEMORY||16777216;function w(e){for(;e.length>0;){var r=e.shift();if("function"!=typeof r){var n=r.func;"number"==typeof n?void 0===r.arg?t.dynCall_v(n):t.dynCall_vi(n,r.arg):n(void 0===r.arg?null:r.arg)}else r()}}g<5242880&&l("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+g+"! (TOTAL_STACK=5242880)"),t.buffer?h=t.buffer:"object"==typeof WebAssembly&&"function"==typeof WebAssembly.Memory?(c=new WebAssembly.Memory({initial:g/65536,maximum:g/65536}),h=c.buffer):h=new ArrayBuffer(g),t.HEAP8=m=new Int8Array(h),t.HEAP16=new Int16Array(h),t.HEAP32=y=new Int32Array(h),t.HEAPU8=_=new Uint8Array(h),t.HEAPU16=new Uint16Array(h),t.HEAPU32=new Uint32Array(h),t.HEAPF32=new Float32Array(h),t.HEAPF64=new Float64Array(h),y[10228]=5283824;var b=[],v=[],E=[],A=[],T=!1;var O=Math.abs,R=Math.sqrt,S=Math.ceil,P=Math.floor,k=0,B=null,x=null;t.preloadedImages={},t.preloadedAudios={};function M(e){return String.prototype.startsWith?e.startsWith("data:application/octet-stream;base64,"):0===e.indexOf("data:application/octet-stream;base64,")}var W,C="OggOpusEncoder.wasm";function I(){try{if(t.wasmBinary)return new Uint8Array(t.wasmBinary);if(t.readBinary)return t.readBinary(C);throw"both async and sync fetching of the wasm failed"}catch(e){K(e)}}function D(e){var r={env:e};function n(e,r){var n=e.exports;t.asm=n,function(e){if(k--,t.monitorRunDependencies&&t.monitorRunDependencies(k),0==k&&(null!==B&&(clearInterval(B),B=null),x)){var r=x;x=null,r()}}()}function o(e){n(e.instance)}function a(e){return(t.wasmBinary||!i&&!s||"function"!=typeof fetch?new Promise((function(e,t){e(I())})):fetch(C,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+C+"'";return e.arrayBuffer()})).catch((function(){return I()}))).then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){l("failed to asynchronously prepare wasm: "+e),K(e)}))}if(k++,t.monitorRunDependencies&&t.monitorRunDependencies(k),t.instantiateWasm)try{return t.instantiateWasm(r,n)}catch(e){return l("Module.instantiateWasm callback failed with error: "+e),!1}return function(){if(t.wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||M(C)||"function"!=typeof fetch)return a(o);fetch(C,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(o,(function(e){l("wasm streaming compile failed: "+e),l("falling back to ArrayBuffer instantiation"),a(o)}))}))}(),{}}function U(e){return(e=+e)>=0?+P(e+.5):+S(e-.5)}function j(e){return t.___errno_location&&(y[t.___errno_location()>>2]=e),e}function L(e){K("OOM")}M(C)||(W=C,C=t.locateFile?t.locateFile(W,a):a+W),t.asm=function(e,t,r){return t.memory=c,t.table=new WebAssembly.Table({initial:31,maximum:31,element:"anyfunc"}),D(t)};var N={b:function(e,t,r,n){K("Assertion failed: "+f(e)+", at: "+[t?f(t):"unknown filename",r,n?f(n):"unknown function"])},j:function(){throw p=!0,"Pure virtual function called!"},i:function(){t.abort()},a:O,d:function(e,r){let n=new Uint8Array(t.HEAPU8.buffer,e,r);t.encodedBuffers.push(new Uint8Array(n).buffer)},g:function(e,t,r){_.set(_.subarray(t,t+r),e)},h:O,k:P,f:function(e){return(e=+e)-+P(e)!=.5?+U(e):2*+U(e/2)},c:function(e){var t,r,n;return e|=0,n=0|m.length,(0|e)>0&(0|(r=(t=0|y[10228])+e|0))<(0|t)|(0|r)<0?(L(),j(12),-1):(0|r)>(0|n)&&!(0|void L())?(j(12),-1):(y[10228]=0|r,0|t)},e:R},F=t.asm({},N,h);t.asm=F;t.___wasm_call_ctors=function(){return t.asm.__wasm_call_ctors.apply(null,arguments)};var H=t._emscripten_bind_VoidPtr___destroy___0=function(){return t.asm.l.apply(null,arguments)},V=t._emscripten_bind_Container_Container_0=function(){return t.asm.m.apply(null,arguments)},z=t._emscripten_bind_Container_init_3=function(){return t.asm.n.apply(null,arguments)},G=t._emscripten_bind_Container_writeFrame_3=function(){return t.asm.o.apply(null,arguments)},X=t._emscripten_bind_Container___destroy___0=function(){return t.asm.p.apply(null,arguments)};t._opus_encoder_create=function(){return t.asm.q.apply(null,arguments)},t._opus_encode_float=function(){return t.asm.r.apply(null,arguments)},t._opus_encoder_ctl=function(){return t.asm.s.apply(null,arguments)},t._opus_encoder_destroy=function(){return t.asm.t.apply(null,arguments)},t._malloc=function(){return t.asm.u.apply(null,arguments)},t._free=function(){return t.asm.v.apply(null,arguments)},t._speex_resampler_init=function(){return t.asm.w.apply(null,arguments)},t._speex_resampler_destroy=function(){return t.asm.x.apply(null,arguments)},t._speex_resampler_process_interleaved_float=function(){return t.asm.y.apply(null,arguments)},t.dynCall_vi=function(){return t.asm.z.apply(null,arguments)},t.dynCall_v=function(){return t.asm.A.apply(null,arguments)};function $(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function q(e){function r(){t.calledRun||(t.calledRun=!0,p||(T||(T=!0,w(v)),w(E),t.onRuntimeInitialized&&t.onRuntimeInitialized(),function(){if(t.postRun)for("function"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;)e=t.postRun.shift(),A.unshift(e);var e;w(A)}()))}e=e||t.arguments,k>0||(!function(){if(t.preRun)for("function"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)e=t.preRun.shift(),b.unshift(e);var e;w(b)}(),k>0||t.calledRun||(t.setStatus?(t.setStatus("Running..."),setTimeout((function(){setTimeout((function(){t.setStatus("")}),1),r()}),1)):r()))}function K(e){throw t.onAbort&&t.onAbort(e),void 0!==e?(u(e),l(e),e='"'+e+'"'):e="",p=!0,1,"abort("+e+"). Build with -s ASSERTIONS=1 for more info."}if(t.asm=F,t.then=function(e){if(t.calledRun)e(t);else{var r=t.onRuntimeInitialized;t.onRuntimeInitialized=function(){r&&r(),e(t)}}return t},$.prototype=new Error,$.prototype.constructor=$,x=function e(){t.calledRun||q(),t.calledRun||(x=e)},t.run=q,t.abort=K,t.preInit)for("function"==typeof t.preInit&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();function Q(){}function Y(e){return(e||Q).__cache__}function J(e,t){var r=Y(t),n=r[e];return n||((n=Object.create((t||Q).prototype)).ptr=e,r[e]=n)}t.noExitRuntime=!0,q(),Q.prototype=Object.create(Q.prototype),Q.prototype.constructor=Q,Q.prototype.__class__=Q,Q.__cache__={},t.WrapperObject=Q,t.getCache=Y,t.wrapPointer=J,t.castObject=function(e,t){return J(e.ptr,t)},t.NULL=J(0),t.destroy=function(e){if(!e.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";e.__destroy__(),delete Y(e.__class__)[e.ptr]},t.compare=function(e,t){return e.ptr===t.ptr},t.getPointer=function(e){return e.ptr},t.getClass=function(e){return e.__class__};function Z(){throw"cannot construct a VoidPtr, no constructor in IDL"}function ee(){this.ptr=V(),Y(ee)[this.ptr]=this}return Z.prototype=Object.create(Q.prototype),Z.prototype.constructor=Z,Z.prototype.__class__=Z,Z.__cache__={},t.VoidPtr=Z,Z.prototype.__destroy__=Z.prototype.__destroy__=function(){var e=this.ptr;H(e)},ee.prototype=Object.create(Q.prototype),ee.prototype.constructor=ee,ee.prototype.__class__=ee,ee.__cache__={},t.Container=ee,ee.prototype.init=ee.prototype.init=function(e,t,r){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),r&&"object"==typeof r&&(r=r.ptr),z(n,e,t,r)},ee.prototype.writeFrame=ee.prototype.writeFrame=function(e,t,r){var n=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),r&&"object"==typeof r&&(r=r.ptr),G(n,e,t,r)},ee.prototype.__destroy__=ee.prototype.__destroy__=function(){var e=this.ptr;X(e)},function(){function e(){}var t;T||(t=e,E.unshift(t))}(),t}}();function initWorker(e){const t=Module;let r;e.onmessage=function(e){const{command:n}=e.data;switch(n){case"loadEncoder":const{mimeType:o,wasmPath:i}=e.data;let s;switch(o){case"audio/ogg":s=t}let a={};i&&(a.locateFile=function(e,t){return e.match(/.wasm/)?i:t+e}),s(a).then(e=>{r=e,self.postMessage({command:"readyToInit"})});break;case"init":const{sampleRate:c,channelCount:u,bitsPerSecond:l}=e.data;r.init(c,u,l);break;case"pushInputData":const{channelBuffers:p,length:d,duration:f}=e.data;for(let e=0;e<p.length;e++)p[e]=new Float32Array(p[e].buffer);r.encode(p);break;case"getEncodedData":case"done":"done"===n&&r.close();const h=r.flush();self.postMessage({command:"done"===n?"lastEncodedData":"encodedData",buffers:h},h),"done"===n&&self.close()}}}"object"==typeof exports&&"object"==typeof module?module.exports=Module:"function"==typeof define&&define.amd?define([],(function(){return Module})):"object"==typeof exports&&(exports.Module=Module),"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&initWorker(self);let localAudio=document.createElement("audio");localAudio.muted=!0,localAudio.hidden=!0,localAudio.autoplay=!0,document.body.appendChild(localAudio);let stream=null,fileName=null,audioCtx=null,audioRecorder={},recordingDuration=3e4,recorderCallback=null;const workerOptions={OggOpusEncoderWasmPath:"./OggOpusEncoder.wasm"};function OggOpusRecorder(e,t){console.log("Recorder audio file to ogg"),fileName=e.name.replace(/\.[^\.]+$/,""),recorderCallback=t,audioCtx=new AudioContext;let r=new FileReader;r.file=e,r.onload=function(e){console.log("file reade onload...");let t=e.target.result;audioCtx.decodeAudioData(t).then(createSoundSource).catch((function(e){console.error(e.toString())}))},r.readAsArrayBuffer(r.file)}function createSoundSource(e){let t=audioCtx.createBufferSource();t.buffer=e;let r=audioCtx.createMediaStreamDestination();t.connect(r),t.start(),localAudio.srcObject=r.stream,stream=r.stream}function createMediaRecorder(e,t){let r={mimeType:"audio/ogg"},n=new MediaRecorder(e,r,workerOptions,t),o=[];return n.onstart=function(){o=[],console.log("Recorder started")},n.ondataavailable=function(e){o.push(e.data),console.log("Recorder data available ")},n.onstop=function(){console.log("recorder complete!");let t=o[0];if(o=[],!t.size)throw new Error("Exception: Blob is empty");recorderCallback?(recorderCallback(t),audioRecorder=null,audioCtx=null,e=null,recorderCallback=null):console.warn("recorderCallback is not found.")},n.onpause=function(){console.log("Recorder paused")},n.onresume=function(){console.log("Recorder resumed")},n.onerror=function(e){e&&(e.name||(e.name="UnknownError"),-1!==e.name.toString().toLowerCase().indexOf("invalidstate")?console.error("The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.",e):-1!==e.name.toString().toLowerCase().indexOf("notsupported")?console.error("MIME type (",r.mimeType,") is not supported.",e):-1!==e.name.toString().toLowerCase().indexOf("security")?console.error("MediaRecorder security error",e):"OutOfMemory"===e.name?console.error("The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"IllegalStreamModification"===e.name?console.error("A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"OtherRecordingError"===e.name?console.error("Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"GenericError"===e.name?console.error("The UA cannot provide the codec or recording option that has been requested.",e):console.error("MediaRecorder Error",e),console.error("Recorder encounters error:"+e.message),"inactive"!==n._state&&"stopped"!==n._state&&n.stop())},n}window.MediaRecorder=OggOpusMediaRecorder,localAudio.addEventListener("canplay",(function(){try{localAudio.play(),audioRecorder=createMediaRecorder(stream,recordingDuration),console.log("Creating MediaRecorder success"),audioRecorder.startRecording()}catch(e){console.log("MediaRecorder is failed: "+e.message),Promise.reject(new Error)}})),localAudio.addEventListener("ended",(function(){"inactive"!==audioRecorder._state&&"stopped"!==audioRecorder._state&&audioRecorder.stopRecording()})),window.addEventListener("load",(function(){if(void 0===OggOpusMediaRecorder)console.error("No OpusMediaRecorder found");else{["audio/wave","audio/wav","audio/ogg","audio/ogg;codecs=opus","audio/webm","audio/webm;codecs=opus"].forEach((function(e){console.log(e+" is "+(MediaRecorder.isTypeSupported(e)?"supported":"NOT supported"))}))}}),!1);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
