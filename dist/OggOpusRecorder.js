const e=new WeakMap,t=new WeakMap;function n(t){const n=e.get(t);return console.assert(null!=n,"'this' is expected an Event object, but got",t),n}function r(t,n){e.set(this,{eventTarget:t,event:n,eventPhase:2,currentTarget:t,canceled:!1,stopped:!1,passiveListener:null,timeStamp:n.timeStamp||Date.now()}),Object.defineProperty(this,"isTrusted",{value:!1,enumerable:!0});const r=Object.keys(n);for(let e=0;e<r.length;++e){const t=r[e];t in this||Object.defineProperty(this,t,o(t))}}function o(e){return{get(){return n(this).event[e]},set(t){n(this).event[e]=t},configurable:!0,enumerable:!0}}function i(e){return{value(){const t=n(this).event;return t[e].apply(t,arguments)},configurable:!0,enumerable:!0}}function s(e){if(null==e||e===Object.prototype)return r;let n=t.get(e);return null==n&&(n=function(e,t){const n=Object.keys(t);if(0===n.length)return e;function r(t,n){e.call(this,t,n)}r.prototype=Object.create(e.prototype,{constructor:{value:r,configurable:!0,writable:!0}});for(let s=0;s<n.length;++s){const a=n[s];if(!(a in e.prototype)){const e="function"==typeof Object.getOwnPropertyDescriptor(t,a).value;Object.defineProperty(r.prototype,a,e?i(a):o(a))}}return r}(s(Object.getPrototypeOf(e)),e),t.set(e,n)),n}function a(e){return n(e).stopped}function c(e,t){n(e).passiveListener=t}r.prototype={get type(){return n(this).event.type},get target(){return n(this).eventTarget},get currentTarget(){return n(this).currentTarget},composedPath(){const e=n(this).currentTarget;return null==e?[]:[e]},get NONE(){return 0},get CAPTURING_PHASE(){return 1},get AT_TARGET(){return 2},get BUBBLING_PHASE(){return 3},get eventPhase(){return n(this).eventPhase},stopPropagation(){const e=n(this);"function"==typeof e.event.stopPropagation&&e.event.stopPropagation()},stopImmediatePropagation(){const e=n(this);e.stopped=!0,"function"==typeof e.event.stopImmediatePropagation&&e.event.stopImmediatePropagation()},get bubbles(){return Boolean(n(this).event.bubbles)},get cancelable(){return Boolean(n(this).event.cancelable)},preventDefault(){const e=n(this);null==e.passiveListener?e.event.cancelable&&(e.canceled=!0,"function"==typeof e.event.preventDefault&&e.event.preventDefault()):console.warn("EventWrapper#preventDefault() was called from a passive listener:",e.passiveListener)},get defaultPrevented(){return n(this).canceled},get composed(){return Boolean(n(this).event.composed)},get timeStamp(){return n(this).timeStamp}},Object.defineProperty(r.prototype,"constructor",{value:r,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.Event&&(Object.setPrototypeOf(r.prototype,window.Event.prototype),t.set(window.Event.prototype,r));const u=new WeakMap;function l(e){return null!==e&&"object"==typeof e}function p(e){const t=u.get(e);if(null==t)throw new TypeError("'this' is expected an EventTarget object, but got another value.");return t}function d(e,t){Object.defineProperty(e,"on"+t,function(e){return{get(){let t=p(this).get(e);for(;null!=t;){if(3===t.listenerType)return t.listener;t=t.next}return null},set(t){"function"==typeof t||l(t)||(t=null);const n=p(this);let r=null,o=n.get(e);for(;null!=o;)3===o.listenerType?null!==r?r.next=o.next:null!==o.next?n.set(e,o.next):n.delete(e):r=o,o=o.next;if(null!==t){const o={listener:t,listenerType:3,passive:!1,once:!1,next:null};null===r?n.set(e,o):r.next=o}},configurable:!0,enumerable:!0}}(t))}function f(e){function t(){h.call(this)}t.prototype=Object.create(h.prototype,{constructor:{value:t,configurable:!0,writable:!0}});for(let n=0;n<e.length;++n)d(t.prototype,e[n]);return t}function h(){if(!(this instanceof h)){if(1===arguments.length&&Array.isArray(arguments[0]))return f(arguments[0]);if(arguments.length>0){const e=new Array(arguments.length);for(let t=0;t<arguments.length;++t)e[t]=arguments[t];return f(e)}throw new TypeError("Cannot call a class as a function")}u.set(this,new Map)}h.prototype={addEventListener(e,t,n){if(null==t)return!1;if("function"!=typeof t&&!l(t))throw new TypeError("'listener' should be a function or an object.");const r=p(this),o=l(n),i=(o?Boolean(n.capture):Boolean(n))?1:2,s={listener:t,listenerType:i,passive:o&&Boolean(n.passive),once:o&&Boolean(n.once),next:null};let a=r.get(e);if(void 0===a)return r.set(e,s),!0;let c=null;for(;null!=a;){if(a.listener===t&&a.listenerType===i)return!1;c=a,a=a.next}return c.next=s,!0},removeEventListener(e,t,n){if(null==t)return!1;const r=p(this),o=(l(n)?Boolean(n.capture):Boolean(n))?1:2;let i=null,s=r.get(e);for(;null!=s;){if(s.listener===t&&s.listenerType===o)return null!==i?i.next=s.next:null!==s.next?r.set(e,s.next):r.delete(e),!0;i=s,s=s.next}return!1},dispatchEvent(e){if(null==e||"string"!=typeof e.type)throw new TypeError('"event.type" should be a string.');const t=p(this),r=e.type;let o=t.get(r);if(null==o)return!0;const i=function(e,t){return new(s(Object.getPrototypeOf(t)))(e,t)}(this,e);let u=null;for(;null!=o;){if(o.once?null!==u?u.next=o.next:null!==o.next?t.set(r,o.next):t.delete(r):u=o,c(i,o.passive?o.listener:null),"function"==typeof o.listener)try{o.listener.call(this,i)}catch(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e)}else 3!==o.listenerType&&"function"==typeof o.listener.handleEvent&&o.listener.handleEvent(i);if(a(i))break;o=o.next}return c(i,null),function(e,t){n(e).eventPhase=t}(i,0),function(e,t){n(e).currentTarget=t}(i,null),!i.defaultPrevented}},Object.defineProperty(h.prototype,"constructor",{value:h,configurable:!0,writable:!0}),"undefined"!=typeof window&&void 0!==window.EventTarget&&Object.setPrototypeOf(h.prototype,window.EventTarget.prototype);var m=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r},_=function(e,t,n){this.name=e,this.version=t,this.os=n},y=function(e){this.version=e,this.name="node",this.os=process.platform},w=function(){this.bot=!0,this.name="bot",this.version=null,this.os=null},g=[["aol",/AOLShield\/([0-9\._]+)/],["edge",/Edge\/([0-9\._]+)/],["edge-ios",/EdgiOS\/([0-9\._]+)/],["yandexbrowser",/YaBrowser\/([0-9\._]+)/],["vivaldi",/Vivaldi\/([0-9\.]+)/],["kakaotalk",/KAKAOTALK\s([0-9\.]+)/],["samsung",/SamsungBrowser\/([0-9\.]+)/],["silk",/\bSilk\/([0-9._-]+)\b/],["miui",/MiuiBrowser\/([0-9\.]+)$/],["beaker",/BeakerBrowser\/([0-9\.]+)/],["edge-chromium",/Edg\/([0-9\.]+)/],["chromium-webview",/(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["chrome",/(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],["phantomjs",/PhantomJS\/([0-9\.]+)(:?\s|$)/],["crios",/CriOS\/([0-9\.]+)(:?\s|$)/],["firefox",/Firefox\/([0-9\.]+)(?:\s|$)/],["fxios",/FxiOS\/([0-9\.]+)/],["opera-mini",/Opera Mini.*Version\/([0-9\.]+)/],["opera",/Opera\/([0-9\.]+)(?:\s|$)/],["opera",/OPR\/([0-9\.]+)(:?\s|$)/],["ie",/Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],["ie",/MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],["ie",/MSIE\s(7\.0)/],["bb10",/BB10;\sTouch.*Version\/([0-9\.]+)/],["android",/Android\s([0-9\.]+)/],["ios",/Version\/([0-9\._]+).*Mobile.*Safari.*/],["safari",/Version\/([0-9\._]+).*Safari/],["facebook",/FBAV\/([0-9\.]+)/],["instagram",/Instagram\s([0-9\.]+)/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Mobile/],["ios-webview",/AppleWebKit\/([0-9\.]+).*Gecko\)$/],["searchbot",/alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/]],b=[["iOS",/iP(hone|od|ad)/],["Android OS",/Android/],["BlackBerry OS",/BlackBerry|BB10/],["Windows Mobile",/IEMobile/],["Amazon OS",/Kindle/],["Windows 3.11",/Win16/],["Windows 95",/(Windows 95)|(Win95)|(Windows_95)/],["Windows 98",/(Windows 98)|(Win98)/],["Windows 2000",/(Windows NT 5.0)|(Windows 2000)/],["Windows XP",/(Windows NT 5.1)|(Windows XP)/],["Windows Server 2003",/(Windows NT 5.2)/],["Windows Vista",/(Windows NT 6.0)/],["Windows 7",/(Windows NT 6.1)/],["Windows 8",/(Windows NT 6.2)/],["Windows 8.1",/(Windows NT 6.3)/],["Windows 10",/(Windows NT 10.0)/],["Windows ME",/Windows ME/],["Open BSD",/OpenBSD/],["Sun OS",/SunOS/],["Chrome OS",/CrOS/],["Linux",/(Linux)|(X11)/],["Mac OS",/(Mac_PowerPC)|(Macintosh)/],["QNX",/QNX/],["BeOS",/BeOS/],["OS/2",/OS\/2/],["Search Bot",/(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp)|(MSNBot)|(Ask Jeeves\/Teoma)|(ia_archiver)/]];function v(e){var t=""!==e&&g.reduce((function(t,n){var r=n[0],o=n[1];if(t)return t;var i=o.exec(e);return!!i&&[r,i]}),!1);if(!t)return null;var n=t[0],r=t[1];if("searchbot"===n)return new w;var o=r[1]&&r[1].split(/[._]/).slice(0,3);return o?o.length<3&&(o=m(o,function(e){for(var t=[],n=0;n<e;n++)t.push("0");return t}(3-o.length))):o=[],new _(n,o.join("."),function(e){for(var t=0,n=b.length;t<n;t++){var r=b[t],o=r[0];if(r[1].test(e))return o}return null}(e))}const E=T?v(T):"undefined"!=typeof navigator?v(navigator.userAgent):"undefined"!=typeof process&&process.version?new y(process.version.slice(1)):null;var T;const A=window.AudioContext||window.webkitAudioContext||!1;class S extends h{constructor(e,t={},n={},r){const{mimeType:o,audioBitsPerSecond:i,videoBitsPerSecond:s,bitsPerSecond:a}=t,{encoderWorkerFactory:c,OggOpusEncoderWasmPath:u,WebMOpusEncoderWasmPath:l}=n;if(super(),this._stream=e,this._state="inactive",this._mimeType=o||"audio/ogg",this._audioBitsPerSecond=i||a,this.workerState="inactive",this.recordingDuration=r||3e4,!S.isTypeSupported(this._mimeType))throw new TypeError("invalid arguments, a MIME Type is not supported");switch(S._parseType(this._mimeType).subtype){case"wave":case"wav":this._mimeType="audio/wave";break;case"webm":this._mimeType="audio/webm";break;case"ogg":this._mimeType="audio/ogg";break;default:switch(E&&E.name){case"chrome":this._mimeType="audio/webm";break;case"firefox":this._mimeType="audio/ogg";break;case"edge":this._mimeType="audio/webm";break;case"ios":case"safari":this._mimeType="audio/wave";break;default:this._mimeType="audio/webm"}}switch(this._mimeType){case"audio/wave":this._wasmPath="";break;case"audio/webm":this._wasmPath=l||"";break;case"audio/ogg":this._wasmPath=u||"";break;default:throw new Error("Internal Error: Unexpected MIME Type: "+this._mimeType)}let p="";document.currentScript?p=document.currentScript.src:self.location&&(p=self.location.href),p=p.substr(0,p.lastIndexOf("/"))+"/src/encoderWorker.js","function"==typeof S.encoderWorker&&(p=URL.createObjectURL(new Blob([`(${S.encoderWorker})()`]))),this._workerFactory="function"==typeof c?c:e=>new Worker(p),this._spawnWorker()}get stream(){return this._stream}get mimeType(){return this._mimeType}get state(){return this._state}get videoBitsPerSecond(){}get audioBitsPerSecond(){return this._audioBitsPerSecond}_spawnWorker(){this.worker=this._workerFactory(),this.worker.onmessage=e=>this._onmessageFromWorker(e),this.worker.onerror=e=>this._onerrorFromWorker(e),this._postMessageToWorker("loadEncoder",{mimeType:this._mimeType,wasmPath:this._wasmPath})}_postMessageToWorker(e,t={}){switch(e){case"loadEncoder":let{mimeType:n,wasmPath:r}=t;this.worker.postMessage({command:e,mimeType:n,wasmPath:r});break;case"init":let{sampleRate:o,channelCount:i,bitsPerSecond:s}=t;this.worker.postMessage({command:e,sampleRate:o,channelCount:i,bitsPerSecond:s}),this.workerState="encoding",this.source.connect(this.processor),this.processor.connect(this.context.destination);let a=new window.Event("start");this.dispatchEvent(a);break;case"pushInputData":let{channelBuffers:c,length:u,duration:l}=t;this.worker.postMessage({command:e,channelBuffers:c,length:u,duration:l},c.map(e=>e.buffer));break;case"getEncodedData":case"done":this.worker.postMessage({command:e});break;default:throw new Error("Internal Error: Incorrect postMessage requested.")}}_onmessageFromWorker(e){const{command:t,buffers:n}=e.data;let r;switch(t){case"readyToInit":const{sampleRate:e,channelCount:o}=this;this.workerState="readyToInit","recording"===this.state&&this._postMessageToWorker("init",{sampleRate:e,channelCount:o,bitsPerSecond:this.audioBitsPerSecond});break;case"encodedData":case"lastEncodedData":let i=new Blob(n,{type:this._mimeType});r=new window.Event("dataavailable"),r.data=i,this.dispatchEvent(r),"lastEncodedData"===t&&(r=new window.Event("stop"),this.dispatchEvent(r),this.workerState="closed")}}_onerrorFromWorker(e){this.source.disconnect(),this.processor.disconnect(),this.worker.terminate(),this.workerState="closed";let t=["FileName: "+e.filename,"LineNumber: "+e.lineno,"Message: "+e.message].join(" - "),n=new window.Event("error");n.name="UnknownError",n.message=t,this.dispatchEvent(n)}_enableAudioProcessCallback(e){let t=0;this.processor.onaudioprocess=n=>{const{inputBuffer:r,playbackTime:o}=n,{sampleRate:i,length:s,duration:a,numberOfChannels:c}=r,u=new Array(c);for(let e=0;e<c;e++)u[e]=r.getChannelData(e);const l={channelBuffers:u,length:s,duration:a};this._postMessageToWorker("pushInputData",l),t+=a,t>=e&&(this._postMessageToWorker("getEncodedData"),t=0)}}handleRecordingDuration(e){e=e||0;let t=this;"paused"!==t._state?"stopped"!==t._state&&(e>=t.recordingDuration?t.stopRecording():(e+=1e3,setTimeout((function(){t.handleRecordingDuration(e)}),1e3))):setTimeout((function(){t.handleRecordingDuration(e)}),1e3)}startRecording(e=Number.MAX_SAFE_INTEGER){if("inactive"!==this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must be inactive.");if(e<0)throw new TypeError("invalid arguments, timeslice should be 0 or higher.");if(e/=1e3,"closed"===this.workerState&&this._spawnWorker(),this.context=new A,!this.stream.getAudioTracks()[0])throw new Error("DOMException: UnkownError, media track not found.");if(this.channelCount=2,this.sampleRate=this.context.sampleRate,this.source=this.context.createMediaStreamSource(this.stream),this.processor=this.context.createScriptProcessor(4096,this.channelCount,this.channelCount),this._state="recording",this._enableAudioProcessCallback(e),"readyToInit"===this.workerState){const{sampleRate:e,channelCount:t}=this;this._postMessageToWorker("init",{sampleRate:e,channelCount:t,bitsPerSecond:this.audioBitsPerSecond})}this.recordingDuration&&this.handleRecordingDuration()}stopRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.disconnect(),this.processor.disconnect(),this.context.close(),this._postMessageToWorker("done"),this._state="inactive"}pauseRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.disconnect(),this.processor.disconnect();let e=new window.Event("pause");this.dispatchEvent(e),this._state="paused"}resumeRecording(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this.source.connect(this.processor),this.processor.connect(this.context.destination);let e=new window.Event("resume");this.dispatchEvent(e),this._state="recording"}requestData(){if("inactive"===this.state)throw new Error("DOMException: INVALID_STATE_ERR, state must NOT be inactive.");this._postMessageToWorker("getEncodedData")}static isTypeSupported(e){if("string"==typeof e&&!e)return!0;try{var{type:t,subtype:n,codec:r}=S._parseType(e)}catch(e){return!1}if("audio"!==t||"ogg"!==n&&"webm"!==n&&"wave"!==n&&"wav"!==n)return!1;switch(n){case"ogg":case"webm":if("opus"!==r&&r)return!1;break;case"wave":case"wav":if(r)return!1}return!0}static _parseType(e){try{const o=/^(\w+)\/(\w+)(;\s*codecs=(\w+))?$/;var[,t,n,,r]=e.match(o)}catch(t){return"string"!=typeof e||e?null:{type:"",subtype:"",codec:""}}return{type:t,subtype:n,codec:r}}}var O;["start","stop","dataavailable","pause","resume","error"].forEach(e=>d(S.prototype,e)),E&&"edge"===E.name&&(O=Worker.prototype.postMessage,Worker.prototype.postMessage=function(e,t=null){O.apply(this,[e])});class P{constructor(e,t,n,r){switch(this._size=t,this._module=e,this._size){case 1:this._heapArray=n?this._module.HEAP8:this._module.HEAPU8;break;case 2:this._heapArray=n?this._module.HEAP16:this._module.HEAPU16;break;case 4:this._heapArray=n?this._module.HEAP32:this._module.HEAPU32;break;default:this._heapArray=this._module.HEAPU8}r&&(this._size=4,this._heapArray=this._module.HEAPF32),this._pointer=this._module._malloc(t)}free(){this._module._free(this.pointer)}get pointer(){return this._pointer}get value(){let e=0;switch(this._size){case 2:e=1;break;case 4:e=2;break;default:throw new Error("Pointer can be only deferenced as integer-sized")}return this._heapArray[this.pointer>>e]}set value(e){let t=0;switch(this._size){case 2:t=1;break;case 4:t=2;break;default:throw new Error("Pointer can be only deferenced as integer-sized")}this._heapArray[this.pointer>>t]=e}}class k extends P{constructor(e,t){super(e,4,!0,!1),void 0!==t&&(this.value=t)}}class x extends P{constructor(e,t){super(e,4,!1,!1),void 0!==t&&(this.value=t)}}class R extends P{constructor(e,t,n,r,o){super(e,t*n,r,o);let i=0;switch(n){case 1:this._heapArray=r?this._module.HEAP8:this._module.HEAPU8,i=0;break;case 2:this._heapArray=r?this._module.HEAP16:this._module.HEAPU16,i=1;break;case 4:this._heapArray=r?this._module.HEAP32:this._module.HEAPU32,i=2;break;default:throw new Error("Unit size must be an integer-size")}o&&(this._heapArray=this._module.HEAPF32,i=2);let s=this._pointer>>i;this._buffer=this._heapArray.subarray(s,s+t),this._length=t}set(e,t){this._buffer.set(e,t)}subarray(e,t){return this._buffer.subarray(e,t)}get length(){return this._length}}class B extends R{constructor(e,t){super(e,t,4,!0,!0)}}class M extends R{constructor(e,t){super(e,t,1,!1,!1)}}class W{constructor(e){this._module=e}mallocInt32(e){return new k(this._module,e)}mallocUint32(e){return new x(this._module,e)}mallocUint8Buffer(e){return new M(this._module,e)}mallocFloat32Buffer(e){return new B(this._module,e)}}var I,C=(I="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(e){e=void 0!==(e=e||{})?e:{};class t{constructor(t,n,r){this.config={inputSampleRate:t,channelCount:n},this.memory=new W(e),this._opus_encoder_create=e._opus_encoder_create,this._opus_encoder_ctl=e._opus_encoder_ctl,this._opus_encode_float=e._opus_encode_float,this._opus_encoder_destroy=e._opus_encoder_destroy,this._speex_resampler_init=e._speex_resampler_init,this._speex_resampler_process_interleaved_float=e._speex_resampler_process_interleaved_float,this._speex_resampler_destroy=e._speex_resampler_destroy,this._container=new e.Container,this._container.init(48e3,n,Math.floor(4294967295*Math.random())),this.OpusInitCodec(48e3,n,r),this.SpeexInitResampler(t,48e3,n),this.inputSamplesPerChannel=20*t/1e3,this.outputSamplePerChannel=960,this.inputBufferIndex=0,this.mInputBuffer=this.memory.mallocFloat32Buffer(this.inputSamplesPerChannel*n),this.mResampledBuffer=this.memory.mallocFloat32Buffer(this.outputSamplePerChannel*n),this.mOutputBuffer=this.memory.mallocUint8Buffer(4e3),this.interleavedBuffers=1!==n?new Float32Array(4096*n):void 0}encode(e){let t=this.interleave(e),n=0;for(;n<t.length;){let e=Math.min(this.mInputBuffer.length-this.inputBufferIndex,t.length-n);if(this.mInputBuffer.set(t.subarray(n,n+e),this.inputBufferIndex),this.inputBufferIndex+=e,this.inputBufferIndex>=this.mInputBuffer.length){let e=this.memory.mallocUint32(this.inputSamplesPerChannel),t=this.memory.mallocUint32(this.outputSamplePerChannel),n=this._speex_resampler_process_interleaved_float(this.resampler,this.mInputBuffer.pointer,e.pointer,this.mResampledBuffer.pointer,t.pointer);if(e.free(),t.free(),0!==n)throw new Error("Resampling error.");let r=this._opus_encode_float(this.encoder,this.mResampledBuffer.pointer,this.outputSamplePerChannel,this.mOutputBuffer.pointer,this.mOutputBuffer.length);if(r<0)throw new Error("Opus encoding error.");this._container.writeFrame(this.mOutputBuffer.pointer,r,this.outputSamplePerChannel),this.inputBufferIndex=0}n+=e}}close(){const{channelCount:t}=this.config;let n=[];for(let e=0;e<t;++e)n.push(new Float32Array(4096-this.inputBufferIndex/t));this.encode(n),e.destroy(this._container),this.mInputBuffer.free(),this.mResampledBuffer.free(),this.mOutputBuffer.free(),this._opus_encoder_destroy(this.encoder),this._speex_resampler_destroy(this.resampler)}interleave(e){const t=e.length;if(1===t)return e[0];for(let n=0;n<t;n++){let r=e[n];for(let e=0;e<r.length;e++)this.interleavedBuffers[e*t+n]=r[e]}return this.interleavedBuffers}OpusInitCodec(e,t,n){let r=this.memory.mallocUint32(void 0);this.encoder=this._opus_encoder_create(e,t,2049,r.pointer);let o=r.value;if(r.free(),0!==o)throw new Error("Opus encodor initialization failed.");n&&this.OpusSetOpusControl(4002,n)}OpusSetOpusControl(e,t){let n=this.memory.mallocInt32(t);this._opus_encoder_ctl(this.encoder,e,n.pointer),n.free()}SpeexInitResampler(e,t,n){let r=this.memory.mallocUint32(void 0);this.resampler=this._speex_resampler_init(n,e,t,6,r.pointer);let o=r.value;if(r.free(),0!==o)throw new Error("Initializing resampler failed.")}}e.init=function(n,r,o){e.encodedBuffers=[],e.encoder=new t(n,r,o)},e.encode=function(t){e.encoder.encode(t)},e.flush=function(){return e.encodedBuffers.splice(0,e.encodedBuffers.length)},e.close=function(){e.encoder.close()};var n,r,o,i={};for(n in e)e.hasOwnProperty(n)&&(i[n]=e[n]);e.arguments=[],e.thisProgram="./this.program",e.quit=function(e,t){throw t},e.preRun=[],e.postRun=[],r="object"==typeof window,o="function"==typeof importScripts;var s="";(r||o)&&(o?s=self.location.href:document.currentScript&&(s=document.currentScript.src),I&&(s=I),s=0!==s.indexOf("blob:")?s.substr(0,s.lastIndexOf("/")+1):"",e.read=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},o&&(e.readBinary=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),e.readAsync=function(e,t,n){var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=function(){200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)},e.setWindowTitle=function(e){document.title=e});var a,c=e.print||("undefined"!=typeof console?console.log.bind(console):"undefined"!=typeof print?print:null),u=e.printErr||("undefined"!=typeof printErr?printErr:"undefined"!=typeof console&&console.warn.bind(console)||c);for(n in i)i.hasOwnProperty(n)&&(e[n]=i[n]);i=void 0,"object"!=typeof WebAssembly&&u("no native wasm support detected");var l,p,d,f,h=!1,m="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function _(e,t){return e?function(e,t,n){for(var r=t+n,o=t;e[o]&&!(o>=r);)++o;if(o-t>16&&e.subarray&&m)return m.decode(e.subarray(t,o));for(var i="";t<o;){var s=e[t++];if(128&s){var a=63&e[t++];if(192!=(224&s)){var c=63&e[t++];if((s=224==(240&s)?(15&s)<<12|a<<6|c:(7&s)<<18|a<<12|c<<6|63&e[t++])<65536)i+=String.fromCharCode(s);else{var u=s-65536;i+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else i+=String.fromCharCode((31&s)<<6|a)}else i+=String.fromCharCode(s)}return i}(d,e,t):""}"undefined"!=typeof TextDecoder&&new TextDecoder("utf-16le");var y=e.TOTAL_MEMORY||16777216;function w(t){for(;t.length>0;){var n=t.shift();if("function"!=typeof n){var r=n.func;"number"==typeof r?void 0===n.arg?e.dynCall_v(r):e.dynCall_vi(r,n.arg):r(void 0===n.arg?null:n.arg)}else n()}}y<5242880&&u("TOTAL_MEMORY should be larger than TOTAL_STACK, was "+y+"! (TOTAL_STACK=5242880)"),e.buffer?l=e.buffer:"object"==typeof WebAssembly&&"function"==typeof WebAssembly.Memory?(a=new WebAssembly.Memory({initial:y/65536,maximum:y/65536}),l=a.buffer):l=new ArrayBuffer(y),e.HEAP8=p=new Int8Array(l),e.HEAP16=new Int16Array(l),e.HEAP32=f=new Int32Array(l),e.HEAPU8=d=new Uint8Array(l),e.HEAPU16=new Uint16Array(l),e.HEAPU32=new Uint32Array(l),e.HEAPF32=new Float32Array(l),e.HEAPF64=new Float64Array(l),f[10228]=5283824;var g=[],b=[],v=[],E=[],T=!1,A=Math.abs,S=Math.sqrt,O=Math.ceil,P=Math.floor,k=0,x=null,R=null;function B(e){return String.prototype.startsWith?e.startsWith("data:application/octet-stream;base64,"):0===e.indexOf("data:application/octet-stream;base64,")}e.preloadedImages={},e.preloadedAudios={};var M,C="OggOpusEncoder.wasm";function D(){try{if(e.wasmBinary)return new Uint8Array(e.wasmBinary);if(e.readBinary)return e.readBinary(C);throw"both async and sync fetching of the wasm failed"}catch(e){Y(e)}}function j(t){var n={env:t};function i(t,n){var r=t.exports;e.asm=r,function(t){if(k--,e.monitorRunDependencies&&e.monitorRunDependencies(k),0==k&&(null!==x&&(clearInterval(x),x=null),R)){var n=R;R=null,n()}}()}function s(e){i(e.instance)}function a(t){return(e.wasmBinary||!r&&!o||"function"!=typeof fetch?new Promise((function(e,t){e(D())})):fetch(C,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+C+"'";return e.arrayBuffer()})).catch((function(){return D()}))).then((function(e){return WebAssembly.instantiate(e,n)})).then(t,(function(e){u("failed to asynchronously prepare wasm: "+e),Y(e)}))}if(k++,e.monitorRunDependencies&&e.monitorRunDependencies(k),e.instantiateWasm)try{return e.instantiateWasm(n,i)}catch(e){return u("Module.instantiateWasm callback failed with error: "+e),!1}return function(){if(e.wasmBinary||"function"!=typeof WebAssembly.instantiateStreaming||B(C)||"function"!=typeof fetch)return a(s);fetch(C,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,n).then(s,(function(e){u("wasm streaming compile failed: "+e),u("falling back to ArrayBuffer instantiation"),a(s)}))}))}(),{}}function U(e){return(e=+e)>=0?+P(e+.5):+O(e-.5)}function L(t){return e.___errno_location&&(f[e.___errno_location()>>2]=t),t}function H(e){Y("OOM")}B(C)||(M=C,C=e.locateFile?e.locateFile(M,s):s+M),e.asm=function(e,t,n){return t.memory=a,t.table=new WebAssembly.Table({initial:31,maximum:31,element:"anyfunc"}),j(t)};var N={b:function(e,t,n,r){Y("Assertion failed: "+_(e)+", at: "+[t?_(t):"unknown filename",n,r?_(r):"unknown function"])},j:function(){throw h=!0,"Pure virtual function called!"},i:function(){e.abort()},a:A,d:function(t,n){let r=new Uint8Array(e.HEAPU8.buffer,t,n);e.encodedBuffers.push(new Uint8Array(r).buffer)},g:function(e,t,n){d.set(d.subarray(t,t+n),e)},h:A,k:P,f:function(e){return(e=+e)-+P(e)!=.5?+U(e):2*+U(e/2)},c:function(e){var t,n,r;return e|=0,r=0|p.length,(0|e)>0&(0|(n=(t=0|f[10228])+e|0))<(0|t)|(0|n)<0?(H(),L(12),-1):(0|n)>(0|r)&&!(0|void H())?(L(12),-1):(f[10228]=0|n,0|t)},e:S},F=e.asm({},N,l);e.asm=F,e.___wasm_call_ctors=function(){return e.asm.__wasm_call_ctors.apply(null,arguments)};var z=e._emscripten_bind_VoidPtr___destroy___0=function(){return e.asm.l.apply(null,arguments)},V=e._emscripten_bind_Container_Container_0=function(){return e.asm.m.apply(null,arguments)},G=e._emscripten_bind_Container_init_3=function(){return e.asm.n.apply(null,arguments)},$=e._emscripten_bind_Container_writeFrame_3=function(){return e.asm.o.apply(null,arguments)},q=e._emscripten_bind_Container___destroy___0=function(){return e.asm.p.apply(null,arguments)};function X(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function K(t){function n(){e.calledRun||(e.calledRun=!0,h||(T||(T=!0,w(b)),w(v),e.onRuntimeInitialized&&e.onRuntimeInitialized(),function(){if(e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;)t=e.postRun.shift(),E.unshift(t);var t;w(E)}()))}t=t||e.arguments,k>0||(function(){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)t=e.preRun.shift(),g.unshift(t);var t;w(g)}(),k>0||e.calledRun||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),n()}),1)):n()))}function Y(t){throw e.onAbort&&e.onAbort(t),void 0!==t?(c(t),u(t),t='"'+t+'"'):t="",h=!0,"abort("+t+"). Build with -s ASSERTIONS=1 for more info."}if(e._opus_encoder_create=function(){return e.asm.q.apply(null,arguments)},e._opus_encode_float=function(){return e.asm.r.apply(null,arguments)},e._opus_encoder_ctl=function(){return e.asm.s.apply(null,arguments)},e._opus_encoder_destroy=function(){return e.asm.t.apply(null,arguments)},e._malloc=function(){return e.asm.u.apply(null,arguments)},e._free=function(){return e.asm.v.apply(null,arguments)},e._speex_resampler_init=function(){return e.asm.w.apply(null,arguments)},e._speex_resampler_destroy=function(){return e.asm.x.apply(null,arguments)},e._speex_resampler_process_interleaved_float=function(){return e.asm.y.apply(null,arguments)},e.dynCall_vi=function(){return e.asm.z.apply(null,arguments)},e.dynCall_v=function(){return e.asm.A.apply(null,arguments)},e.asm=F,e.then=function(t){if(e.calledRun)t(e);else{var n=e.onRuntimeInitialized;e.onRuntimeInitialized=function(){n&&n(),t(e)}}return e},X.prototype=new Error,X.prototype.constructor=X,R=function t(){e.calledRun||K(),e.calledRun||(R=t)},e.run=K,e.abort=Y,e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();function J(){}function Q(e){return(e||J).__cache__}function Z(e,t){var n=Q(t),r=n[e];return r||((r=Object.create((t||J).prototype)).ptr=e,n[e]=r)}function ee(){throw"cannot construct a VoidPtr, no constructor in IDL"}function te(){this.ptr=V(),Q(te)[this.ptr]=this}return e.noExitRuntime=!0,K(),J.prototype=Object.create(J.prototype),J.prototype.constructor=J,J.prototype.__class__=J,J.__cache__={},e.WrapperObject=J,e.getCache=Q,e.wrapPointer=Z,e.castObject=function(e,t){return Z(e.ptr,t)},e.NULL=Z(0),e.destroy=function(e){if(!e.__destroy__)throw"Error: Cannot destroy object. (Did you create it yourself?)";e.__destroy__(),delete Q(e.__class__)[e.ptr]},e.compare=function(e,t){return e.ptr===t.ptr},e.getPointer=function(e){return e.ptr},e.getClass=function(e){return e.__class__},ee.prototype=Object.create(J.prototype),ee.prototype.constructor=ee,ee.prototype.__class__=ee,ee.__cache__={},e.VoidPtr=ee,ee.prototype.__destroy__=ee.prototype.__destroy__=function(){var e=this.ptr;z(e)},te.prototype=Object.create(J.prototype),te.prototype.constructor=te,te.prototype.__class__=te,te.__cache__={},e.Container=te,te.prototype.init=te.prototype.init=function(e,t,n){var r=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),n&&"object"==typeof n&&(n=n.ptr),G(r,e,t,n)},te.prototype.writeFrame=te.prototype.writeFrame=function(e,t,n){var r=this.ptr;e&&"object"==typeof e&&(e=e.ptr),t&&"object"==typeof t&&(t=t.ptr),n&&"object"==typeof n&&(n=n.ptr),$(r,e,t,n)},te.prototype.__destroy__=te.prototype.__destroy__=function(){var e=this.ptr;q(e)},function(){function e(){}var t;T||(t=e,v.unshift(t))}(),e});"object"==typeof exports&&"object"==typeof module?module.exports=C:"function"==typeof define&&define.amd?define([],(function(){return C})):"object"==typeof exports&&(exports.Module=C),"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&function(e){const t=C;let n;e.onmessage=function(e){const{command:r}=e.data;switch(r){case"loadEncoder":const{mimeType:o,wasmPath:i}=e.data;let s;switch(o){case"audio/ogg":s=t}let a={};i&&(a.locateFile=function(e,t){return e.match(/.wasm/)?i:t+e}),s(a).then(e=>{n=e,self.postMessage({command:"readyToInit"})});break;case"init":const{sampleRate:c,channelCount:u,bitsPerSecond:l}=e.data;n.init(c,u,l);break;case"pushInputData":const{channelBuffers:p,length:d,duration:f}=e.data;for(let e=0;e<p.length;e++)p[e]=new Float32Array(p[e].buffer);n.encode(p);break;case"getEncodedData":case"done":"done"===r&&n.close();const h=n.flush();self.postMessage({command:"done"===r?"lastEncodedData":"encodedData",buffers:h},h),"done"===r&&self.close()}}}(self);let D=document.createElement("audio");D.muted=!0,D.hidden=!0,D.autoplay=!0,document.body.appendChild(D);let j=null,U=null,L={},H=null;const N={OggOpusEncoderWasmPath:"./OggOpusEncoder.wasm"};window.MediaRecorder=S,D.addEventListener("canplay",(function(){try{D.play(),L=function(e,t){let n={mimeType:"audio/ogg"},r=new MediaRecorder(e,n,N,t),o=[];return r.onstart=function(){o=[],console.log("Recorder started")},r.ondataavailable=function(e){o.push(e.data),console.log("Recorder data available ")},r.onstop=function(){console.log("recorder complete!");let t=new Blob(o,{type:r.mimeType});if(o=[],!t.size)throw new Error("Exception: Blob is empty");H&&(H(t),L=null,U=null,e=null,H=null)},r.onpause=function(){console.log("Recorder paused")},r.onresume=function(){console.log("Recorder resumed")},r.onerror=function(e){e&&(e.name||(e.name="UnknownError"),-1!==e.name.toString().toLowerCase().indexOf("invalidstate")?console.error("The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.",e):-1!==e.name.toString().toLowerCase().indexOf("notsupported")?console.error("MIME type (",n.mimeType,") is not supported.",e):-1!==e.name.toString().toLowerCase().indexOf("security")?console.error("MediaRecorder security error",e):"OutOfMemory"===e.name?console.error("The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"IllegalStreamModification"===e.name?console.error("A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"OtherRecordingError"===e.name?console.error("Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.",e):"GenericError"===e.name?console.error("The UA cannot provide the codec or recording option that has been requested.",e):console.error("MediaRecorder Error",e),console.error("Recorder encounters error:"+e.message),"inactive"!==r._state&&"stopped"!==r._state&&r.stop())},r}(j,3e4),console.log("Creating MediaRecorder is successful, Start recorder..."),L.startRecording()}catch(e){console.log("MediaRecorder is failed: "+e.message),Promise.reject(new Error)}})),D.addEventListener("ended",(function(){"inactive"!==L._state&&"stopped"!==L._state&&L.stopRecording()})),window.addEventListener("load",(function(){if(void 0===S)console.error("No OpusMediaRecorder found");else{["audio/wave","audio/wav","audio/ogg","audio/ogg;codecs=opus","audio/webm","audio/webm;codecs=opus"].forEach((function(e){console.log(e+" is "+(MediaRecorder.isTypeSupported(e)?"supported":"NOT supported"))}))}}),!1);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
